#!/usr/bin/python3.11

import sys
import argparse
import tomllib
from datetime import datetime
from pathlib import Path

class Constants:
    progname = "nomnorm"
    version = "0.1"
    config_file_path = Path.home() / ".config" / progname / "config.toml"

    default_config: str = f"""# {progname} configuration toml file
#
# First generated {datetime.now()} by {progname} version {version}
# For information on toml syntax, see https://toml.io/en/
default_profile = "default"

[default]
# Relative or absolute path to the directory containing files to rename
target = "."

# Name of file containing the final filenames
filename_file = "normative_file_names.txt"

# Filename correlation pattern regex.
#
# This regex is matched against each final filename to extract a substring
# used to find the file in the target directory that should be renamed to that
# final filename.
#
# Default correlation is for YYYYMMDD-HHmmss timestamps
correlation_regex = '\d{{8}}-\d{{6}}'

# Correlation substring replacement.
# If specified, the first matching pattern will be used in a regex substition
# to generate the final filename??? Whoops wrong way.
"""

class ConfigFile:
    path: Path = Constants.config_file_path

    @classmethod
    def load_config(cls) -> object:
        # Check if the config file exists
        if not cls.path.exists():
            print(f"Generating default config file at {cls.path}")
            with cls.path.open(mode='w') as f:
                f.write(Constants.default_config)

        print(f"Loading config file from {cls.path}")
        with cls.path.open("rb") as f:
            return tomllib.load(f)

    @classmethod
    def skip_config_file(cls) -> object:
        """Just load the default config, don't mess with the config file"""
        tomllib.loads(Constants.default_config)

    @classmethod
    def regenerate_config(cls) -> object:
        cls.rename_config_to_backup()
        return cls.load_config()

    @classmethod
    def rename_config_to_backup(cls) -> None:
        # Ensure the path exists
        if not cls.path.exists():
            print(f"Note: Prior config {cls.path} does not exist; skipping backup")
            return

        # Get the last modification time of the file
        mtime = cls.path.stat().st_mtime
        timestamp = datetime.utcfromtimestamp(mtime).strftime("%Y%m%dT%H%M%S")

        # Rename the file
        new_path = cls.path.with_name(f"{cls.path.stem}.old.{timestamp}{cls.path.suffix}")
        cls.path.rename(new_path)

        print(f"Config file renamed to: {new_path}")

def main():
    config = ConfigFile.regenerate_config()
    print(config)
    #print(config["default"]["correlation_regex"])
    return 0

if __name__ == "__main__":
    sys.exit(main())
