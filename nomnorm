#!/usr/bin/python3.11

from __future__ import annotations

import sys
import json
import argparse
import tomllib
from datetime import datetime
from pathlib import Path

class Constants:
    progname = "nomnorm"
    version = "0.1"
    config_file_path = Path.home() / ".config" / progname / f"{progname}.config.toml"

    default_config: str = f"""\
# {progname} configuration toml file
#
# First generated {datetime.now()} by {progname} version {version}
# For information on toml syntax, see https://toml.io/en/
""" """\
profile = "default"

[default]
# Relative or absolute path to the directory containing files to rename
target = "."

# Name of file containing the final filename stubs
stubs_file = "filename_stubs.txt"

# match_groups is a table specifying groups common to many of the file_subs
# and/or the stub_pattern. Each pattern is formatted by calling
# .format(**match_groups) on it to replace instance of {groupname} in the
# pattern with the value of match_groups.groupname in this table.
match_groups.key = '\d{8}-\d{6}'
match_groups.resmp4 = '\d+x\d+\.mp4'

# stub_pattern is used to extract the key and replacement text from the
# filename stubs in stubs_file.
#
# The pattern must contain a group named 'key', which is used as a hash key in
# the dict for looking up which replacement to use for each file matched by
# patterns in the src_pattern array.
#
# The entire text of the matched stub is passed as a keyword parameter named
# 'stub' to the format call for renaming the src files, so the pattern need
# not match more than the key group in the pattern.
#
# The pattern text can contain named match groups.  These are passed as
# keyword arguments to format the replacement text.
stub_pattern = 'zoom[._]{key}(GMT|Z)\..*'

# file_subs is a list of inline dicts, each with two keys:
#
# * pat - regex pattern used to match each filename; must contain the 'key' named group
#   Each pattern has .format() called on it with keywords from match_groups
#   and 'stub_pattern' defined.  The values of match_groups are substituted
#   directly, but the stub_pattern is first itself formatted using the
#   match_groups. To use {} range matching, you will need to double the braces
#   to avoid the format expansion like {{ }}.
#
# * rep - replacement template.  This can contain back-references as well as
#   {} format interpolation parts, since .format() is called on this string
#   with the following keyword parameters:
#   - 'stub' - the text of the filename stub this filename's key matched in the stubs_file
#   - any of the named groups matched from the stub_pattern
#
# For each file, each pattern in this list is tried in order - the first one
# that matches is applied to determine how to match the key and rename the file.
#
# TODO - we could another entry called 'key' that specifies how to form the
# key from the given pattern, allowing key renaming.
file_subs = [
  { pat='{stub_pattern}[_.]{resmp4}', rep='{stub}.\g<resmp4>' },
  { pat='{stub_pattern}[_.]?(new)?[Cc]hat\.txt', rep='{stub}.chat.txt' },
  { pat='{stub_pattern}\.m4a', rep='{stub}.m4a' },
  { pat='GMT{key}_Recording_{resmp4}', rep='{stub}.\g<resmp4>' },
  { pat='GMT{key}_RecordingnewChat.txt', rep='{stub}.chat.txt' },
  { pat='GMT{key}_Recording.m4a', rep='{stub}.m4a' },
]

# When true, the script uses the parsed timestamp as a GMT timestamp, and
# updates the file's last-update (modification) time to match.
set_file_mtime = true
"""

class GetAttrDict(dict):
    def __getattr__(self, key): return self[key]

    @staticmethod
    def attrify(struct: list|dict|Any) -> list|GetAttrDict|Any:
        """Walks the given list/dict struct and returns a GetAttrDict-ified one.

        The returned struct is identical except all dict-like instances are
        replaced with new shallow copies as GetAttrDict instances.
        """
        if isinstance(struct, dict):
            return GetAttrDict((k, GetAttrDict.attrify(v)) for k, v in struct.items())
        elif isinstance(struct, list):
            return [GetAttrDict.attrify(e) for e in struct]
        else:
            return struct

class ConfigFile:
    """Class for managing toml configs files.

    The loaded config is in the config data member, with all dicts replaced
    with GetAttrDict instances.
    """
    def __init__(self, path: Path|str, default: str=""):
        self.path = path
        self.default = default
        self.config = None

    def load_file(self) -> object:
        """Loads the config.  If the file doesn't exist, it's written first."""
        if not self.path.exists():
            print(f"Generating default config file at {self.path}")
            with self.path.open(mode='w') as f:
                f.write(self.default)

        print(f"Loading config file from {self.path}")
        with self.path.open("rb") as f:
            self.config = GetAttrDict.attrify(tomllib.load(f))

    def load_default(self) -> object:
        """Just load the default config, don't mess with the config file"""
        self.config = GetAttrDict.attrify(tomllib.loads(self.default))

    def regenerate_config(self) -> object:
        self.rename_config_to_backup()
        self.load_file()

    def rename_config_to_backup(self) -> None:
        # Ensure the path exists
        if not self.path.exists():
            print(f"Note: Prior config {self.path} does not exist; skipping backup")
            return

        # Get the last modification time of the file
        mtime = self.path.stat().st_mtime
        timestamp = datetime.utcfromtimestamp(mtime).strftime("%Y%m%dT%H%M%S")

        # Rename the file
        new_path = self.path.with_name(f"{self.path.stem}.old.{timestamp}{self.path.suffix}")
        self.path.rename(new_path)

        print(f"Config file renamed to: {new_path}")

def process_command_line() -> argparse.Namespace:
    """Load the command line options"""

def main():
    #config = ConfigFile.regenerate_config()
    cf = ConfigFile(Constants.config_file_path,
                    default=Constants.default_config)
    cf.load_file()
    json.dump(cf.config, sys.stdout, indent=1)
    print(cf.config.default.file_subs[1].pat)
    return 0

if __name__ == "__main__":
    sys.exit(main())
